#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class WorkerMeta:
  """
  Attributes:
   - worker_id
   - buffer_id
   - worker_num
   - buffer_size
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'worker_id', None, None, ), # 1
    (2, TType.I32, 'buffer_id', None, None, ), # 2
    (3, TType.I32, 'worker_num', None, None, ), # 3
    (4, TType.I32, 'buffer_size', None, None, ), # 4
  )

  def __init__(self, worker_id=None, buffer_id=None, worker_num=None, buffer_size=None,):
    self.worker_id = worker_id
    self.buffer_id = buffer_id
    self.worker_num = worker_num
    self.buffer_size = buffer_size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.worker_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.buffer_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.worker_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.buffer_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkerMeta')
    if self.worker_id is not None:
      oprot.writeFieldBegin('worker_id', TType.I32, 1)
      oprot.writeI32(self.worker_id)
      oprot.writeFieldEnd()
    if self.buffer_id is not None:
      oprot.writeFieldBegin('buffer_id', TType.I32, 2)
      oprot.writeI32(self.buffer_id)
      oprot.writeFieldEnd()
    if self.worker_num is not None:
      oprot.writeFieldBegin('worker_num', TType.I32, 3)
      oprot.writeI32(self.worker_num)
      oprot.writeFieldEnd()
    if self.buffer_size is not None:
      oprot.writeFieldBegin('buffer_size', TType.I32, 4)
      oprot.writeI32(self.buffer_size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.worker_id)
    value = (value * 31) ^ hash(self.buffer_id)
    value = (value * 31) ^ hash(self.worker_num)
    value = (value * 31) ^ hash(self.buffer_size)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MasterClientMetaState:
  """
  Attributes:
   - worker_id
   - buffer_id
   - current_client_pid
   - last_client_pid
   - client_start_timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'worker_id', None, None, ), # 1
    (2, TType.I32, 'buffer_id', None, None, ), # 2
    (3, TType.I32, 'current_client_pid', None, None, ), # 3
    (4, TType.I32, 'last_client_pid', None, None, ), # 4
    (5, TType.I64, 'client_start_timestamp', None, None, ), # 5
  )

  def __init__(self, worker_id=None, buffer_id=None, current_client_pid=None, last_client_pid=None, client_start_timestamp=None,):
    self.worker_id = worker_id
    self.buffer_id = buffer_id
    self.current_client_pid = current_client_pid
    self.last_client_pid = last_client_pid
    self.client_start_timestamp = client_start_timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.worker_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.buffer_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.current_client_pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.last_client_pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.client_start_timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MasterClientMetaState')
    if self.worker_id is not None:
      oprot.writeFieldBegin('worker_id', TType.I32, 1)
      oprot.writeI32(self.worker_id)
      oprot.writeFieldEnd()
    if self.buffer_id is not None:
      oprot.writeFieldBegin('buffer_id', TType.I32, 2)
      oprot.writeI32(self.buffer_id)
      oprot.writeFieldEnd()
    if self.current_client_pid is not None:
      oprot.writeFieldBegin('current_client_pid', TType.I32, 3)
      oprot.writeI32(self.current_client_pid)
      oprot.writeFieldEnd()
    if self.last_client_pid is not None:
      oprot.writeFieldBegin('last_client_pid', TType.I32, 4)
      oprot.writeI32(self.last_client_pid)
      oprot.writeFieldEnd()
    if self.client_start_timestamp is not None:
      oprot.writeFieldBegin('client_start_timestamp', TType.I64, 5)
      oprot.writeI64(self.client_start_timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.worker_id)
    value = (value * 31) ^ hash(self.buffer_id)
    value = (value * 31) ^ hash(self.current_client_pid)
    value = (value * 31) ^ hash(self.last_client_pid)
    value = (value * 31) ^ hash(self.client_start_timestamp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
