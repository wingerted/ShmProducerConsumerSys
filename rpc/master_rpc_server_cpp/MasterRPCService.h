/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MasterRPCService_H
#define MasterRPCService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "client_master_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MasterRPCServiceIf {
 public:
  virtual ~MasterRPCServiceIf() {}
  virtual void RequestWorker(WorkerMeta& _return, const int32_t client_pid) = 0;
  virtual void GetCurrentClientStates(std::vector<MasterClientMetaState> & _return) = 0;
};

class MasterRPCServiceIfFactory {
 public:
  typedef MasterRPCServiceIf Handler;

  virtual ~MasterRPCServiceIfFactory() {}

  virtual MasterRPCServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MasterRPCServiceIf* /* handler */) = 0;
};

class MasterRPCServiceIfSingletonFactory : virtual public MasterRPCServiceIfFactory {
 public:
  MasterRPCServiceIfSingletonFactory(const boost::shared_ptr<MasterRPCServiceIf>& iface) : iface_(iface) {}
  virtual ~MasterRPCServiceIfSingletonFactory() {}

  virtual MasterRPCServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MasterRPCServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MasterRPCServiceIf> iface_;
};

class MasterRPCServiceNull : virtual public MasterRPCServiceIf {
 public:
  virtual ~MasterRPCServiceNull() {}
  void RequestWorker(WorkerMeta& /* _return */, const int32_t /* client_pid */) {
    return;
  }
  void GetCurrentClientStates(std::vector<MasterClientMetaState> & /* _return */) {
    return;
  }
};

typedef struct _MasterRPCService_RequestWorker_args__isset {
  _MasterRPCService_RequestWorker_args__isset() : client_pid(false) {}
  bool client_pid :1;
} _MasterRPCService_RequestWorker_args__isset;

class MasterRPCService_RequestWorker_args {
 public:

  MasterRPCService_RequestWorker_args(const MasterRPCService_RequestWorker_args&);
  MasterRPCService_RequestWorker_args& operator=(const MasterRPCService_RequestWorker_args&);
  MasterRPCService_RequestWorker_args() : client_pid(0) {
  }

  virtual ~MasterRPCService_RequestWorker_args() throw();
  int32_t client_pid;

  _MasterRPCService_RequestWorker_args__isset __isset;

  void __set_client_pid(const int32_t val);

  bool operator == (const MasterRPCService_RequestWorker_args & rhs) const
  {
    if (!(client_pid == rhs.client_pid))
      return false;
    return true;
  }
  bool operator != (const MasterRPCService_RequestWorker_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterRPCService_RequestWorker_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterRPCService_RequestWorker_pargs {
 public:


  virtual ~MasterRPCService_RequestWorker_pargs() throw();
  const int32_t* client_pid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterRPCService_RequestWorker_result__isset {
  _MasterRPCService_RequestWorker_result__isset() : success(false) {}
  bool success :1;
} _MasterRPCService_RequestWorker_result__isset;

class MasterRPCService_RequestWorker_result {
 public:

  MasterRPCService_RequestWorker_result(const MasterRPCService_RequestWorker_result&);
  MasterRPCService_RequestWorker_result& operator=(const MasterRPCService_RequestWorker_result&);
  MasterRPCService_RequestWorker_result() {
  }

  virtual ~MasterRPCService_RequestWorker_result() throw();
  WorkerMeta success;

  _MasterRPCService_RequestWorker_result__isset __isset;

  void __set_success(const WorkerMeta& val);

  bool operator == (const MasterRPCService_RequestWorker_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MasterRPCService_RequestWorker_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterRPCService_RequestWorker_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterRPCService_RequestWorker_presult__isset {
  _MasterRPCService_RequestWorker_presult__isset() : success(false) {}
  bool success :1;
} _MasterRPCService_RequestWorker_presult__isset;

class MasterRPCService_RequestWorker_presult {
 public:


  virtual ~MasterRPCService_RequestWorker_presult() throw();
  WorkerMeta* success;

  _MasterRPCService_RequestWorker_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MasterRPCService_GetCurrentClientStates_args {
 public:

  MasterRPCService_GetCurrentClientStates_args(const MasterRPCService_GetCurrentClientStates_args&);
  MasterRPCService_GetCurrentClientStates_args& operator=(const MasterRPCService_GetCurrentClientStates_args&);
  MasterRPCService_GetCurrentClientStates_args() {
  }

  virtual ~MasterRPCService_GetCurrentClientStates_args() throw();

  bool operator == (const MasterRPCService_GetCurrentClientStates_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MasterRPCService_GetCurrentClientStates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterRPCService_GetCurrentClientStates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterRPCService_GetCurrentClientStates_pargs {
 public:


  virtual ~MasterRPCService_GetCurrentClientStates_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterRPCService_GetCurrentClientStates_result__isset {
  _MasterRPCService_GetCurrentClientStates_result__isset() : success(false) {}
  bool success :1;
} _MasterRPCService_GetCurrentClientStates_result__isset;

class MasterRPCService_GetCurrentClientStates_result {
 public:

  MasterRPCService_GetCurrentClientStates_result(const MasterRPCService_GetCurrentClientStates_result&);
  MasterRPCService_GetCurrentClientStates_result& operator=(const MasterRPCService_GetCurrentClientStates_result&);
  MasterRPCService_GetCurrentClientStates_result() {
  }

  virtual ~MasterRPCService_GetCurrentClientStates_result() throw();
  std::vector<MasterClientMetaState>  success;

  _MasterRPCService_GetCurrentClientStates_result__isset __isset;

  void __set_success(const std::vector<MasterClientMetaState> & val);

  bool operator == (const MasterRPCService_GetCurrentClientStates_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MasterRPCService_GetCurrentClientStates_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterRPCService_GetCurrentClientStates_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterRPCService_GetCurrentClientStates_presult__isset {
  _MasterRPCService_GetCurrentClientStates_presult__isset() : success(false) {}
  bool success :1;
} _MasterRPCService_GetCurrentClientStates_presult__isset;

class MasterRPCService_GetCurrentClientStates_presult {
 public:


  virtual ~MasterRPCService_GetCurrentClientStates_presult() throw();
  std::vector<MasterClientMetaState> * success;

  _MasterRPCService_GetCurrentClientStates_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MasterRPCServiceClient : virtual public MasterRPCServiceIf {
 public:
  MasterRPCServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MasterRPCServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void RequestWorker(WorkerMeta& _return, const int32_t client_pid);
  void send_RequestWorker(const int32_t client_pid);
  void recv_RequestWorker(WorkerMeta& _return);
  void GetCurrentClientStates(std::vector<MasterClientMetaState> & _return);
  void send_GetCurrentClientStates();
  void recv_GetCurrentClientStates(std::vector<MasterClientMetaState> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MasterRPCServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MasterRPCServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MasterRPCServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_RequestWorker(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCurrentClientStates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MasterRPCServiceProcessor(boost::shared_ptr<MasterRPCServiceIf> iface) :
    iface_(iface) {
    processMap_["RequestWorker"] = &MasterRPCServiceProcessor::process_RequestWorker;
    processMap_["GetCurrentClientStates"] = &MasterRPCServiceProcessor::process_GetCurrentClientStates;
  }

  virtual ~MasterRPCServiceProcessor() {}
};

class MasterRPCServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MasterRPCServiceProcessorFactory(const ::boost::shared_ptr< MasterRPCServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MasterRPCServiceIfFactory > handlerFactory_;
};

class MasterRPCServiceMultiface : virtual public MasterRPCServiceIf {
 public:
  MasterRPCServiceMultiface(std::vector<boost::shared_ptr<MasterRPCServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MasterRPCServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MasterRPCServiceIf> > ifaces_;
  MasterRPCServiceMultiface() {}
  void add(boost::shared_ptr<MasterRPCServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void RequestWorker(WorkerMeta& _return, const int32_t client_pid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestWorker(_return, client_pid);
    }
    ifaces_[i]->RequestWorker(_return, client_pid);
    return;
  }

  void GetCurrentClientStates(std::vector<MasterClientMetaState> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCurrentClientStates(_return);
    }
    ifaces_[i]->GetCurrentClientStates(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MasterRPCServiceConcurrentClient : virtual public MasterRPCServiceIf {
 public:
  MasterRPCServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MasterRPCServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void RequestWorker(WorkerMeta& _return, const int32_t client_pid);
  int32_t send_RequestWorker(const int32_t client_pid);
  void recv_RequestWorker(WorkerMeta& _return, const int32_t seqid);
  void GetCurrentClientStates(std::vector<MasterClientMetaState> & _return);
  int32_t send_GetCurrentClientStates();
  void recv_GetCurrentClientStates(std::vector<MasterClientMetaState> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
