/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "client_master_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




WorkerMeta::~WorkerMeta() throw() {
}


void WorkerMeta::__set_worker_id(const int32_t val) {
  this->worker_id = val;
}

void WorkerMeta::__set_buffer_id(const int32_t val) {
  this->buffer_id = val;
}

void WorkerMeta::__set_worker_num(const int32_t val) {
  this->worker_num = val;
}

void WorkerMeta::__set_buffer_size(const int32_t val) {
  this->buffer_size = val;
}

uint32_t WorkerMeta::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->worker_id);
          this->__isset.worker_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buffer_id);
          this->__isset.buffer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->worker_num);
          this->__isset.worker_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buffer_size);
          this->__isset.buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WorkerMeta::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WorkerMeta");

  xfer += oprot->writeFieldBegin("worker_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->worker_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buffer_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->buffer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("worker_num", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->worker_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buffer_size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->buffer_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WorkerMeta &a, WorkerMeta &b) {
  using ::std::swap;
  swap(a.worker_id, b.worker_id);
  swap(a.buffer_id, b.buffer_id);
  swap(a.worker_num, b.worker_num);
  swap(a.buffer_size, b.buffer_size);
  swap(a.__isset, b.__isset);
}

WorkerMeta::WorkerMeta(const WorkerMeta& other0) {
  worker_id = other0.worker_id;
  buffer_id = other0.buffer_id;
  worker_num = other0.worker_num;
  buffer_size = other0.buffer_size;
  __isset = other0.__isset;
}
WorkerMeta& WorkerMeta::operator=(const WorkerMeta& other1) {
  worker_id = other1.worker_id;
  buffer_id = other1.buffer_id;
  worker_num = other1.worker_num;
  buffer_size = other1.buffer_size;
  __isset = other1.__isset;
  return *this;
}
void WorkerMeta::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WorkerMeta(";
  out << "worker_id=" << to_string(worker_id);
  out << ", " << "buffer_id=" << to_string(buffer_id);
  out << ", " << "worker_num=" << to_string(worker_num);
  out << ", " << "buffer_size=" << to_string(buffer_size);
  out << ")";
}


MasterClientMetaState::~MasterClientMetaState() throw() {
}


void MasterClientMetaState::__set_worker_id(const int32_t val) {
  this->worker_id = val;
}

void MasterClientMetaState::__set_buffer_id(const int32_t val) {
  this->buffer_id = val;
}

void MasterClientMetaState::__set_current_client_pid(const int32_t val) {
  this->current_client_pid = val;
}

void MasterClientMetaState::__set_last_client_pid(const int32_t val) {
  this->last_client_pid = val;
}

void MasterClientMetaState::__set_client_start_timestamp(const int64_t val) {
  this->client_start_timestamp = val;
}

uint32_t MasterClientMetaState::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->worker_id);
          this->__isset.worker_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buffer_id);
          this->__isset.buffer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->current_client_pid);
          this->__isset.current_client_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_client_pid);
          this->__isset.last_client_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_start_timestamp);
          this->__isset.client_start_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MasterClientMetaState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MasterClientMetaState");

  xfer += oprot->writeFieldBegin("worker_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->worker_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buffer_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->buffer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_client_pid", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->current_client_pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_client_pid", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->last_client_pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_start_timestamp", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->client_start_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MasterClientMetaState &a, MasterClientMetaState &b) {
  using ::std::swap;
  swap(a.worker_id, b.worker_id);
  swap(a.buffer_id, b.buffer_id);
  swap(a.current_client_pid, b.current_client_pid);
  swap(a.last_client_pid, b.last_client_pid);
  swap(a.client_start_timestamp, b.client_start_timestamp);
  swap(a.__isset, b.__isset);
}

MasterClientMetaState::MasterClientMetaState(const MasterClientMetaState& other2) {
  worker_id = other2.worker_id;
  buffer_id = other2.buffer_id;
  current_client_pid = other2.current_client_pid;
  last_client_pid = other2.last_client_pid;
  client_start_timestamp = other2.client_start_timestamp;
  __isset = other2.__isset;
}
MasterClientMetaState& MasterClientMetaState::operator=(const MasterClientMetaState& other3) {
  worker_id = other3.worker_id;
  buffer_id = other3.buffer_id;
  current_client_pid = other3.current_client_pid;
  last_client_pid = other3.last_client_pid;
  client_start_timestamp = other3.client_start_timestamp;
  __isset = other3.__isset;
  return *this;
}
void MasterClientMetaState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MasterClientMetaState(";
  out << "worker_id=" << to_string(worker_id);
  out << ", " << "buffer_id=" << to_string(buffer_id);
  out << ", " << "current_client_pid=" << to_string(current_client_pid);
  out << ", " << "last_client_pid=" << to_string(last_client_pid);
  out << ", " << "client_start_timestamp=" << to_string(client_start_timestamp);
  out << ")";
}


