/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef client_master_TYPES_H
#define client_master_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class WorkerMeta;

class MasterClientMetaState;

typedef struct _WorkerMeta__isset {
  _WorkerMeta__isset() : worker_id(false), buffer_id(false), worker_num(false), buffer_size(false) {}
  bool worker_id :1;
  bool buffer_id :1;
  bool worker_num :1;
  bool buffer_size :1;
} _WorkerMeta__isset;

class WorkerMeta {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  WorkerMeta(const WorkerMeta&);
  WorkerMeta& operator=(const WorkerMeta&);
  WorkerMeta() : worker_id(0), buffer_id(0), worker_num(0), buffer_size(0) {
  }

  virtual ~WorkerMeta() throw();
  int32_t worker_id;
  int32_t buffer_id;
  int32_t worker_num;
  int32_t buffer_size;

  _WorkerMeta__isset __isset;

  void __set_worker_id(const int32_t val);

  void __set_buffer_id(const int32_t val);

  void __set_worker_num(const int32_t val);

  void __set_buffer_size(const int32_t val);

  bool operator == (const WorkerMeta & rhs) const
  {
    if (!(worker_id == rhs.worker_id))
      return false;
    if (!(buffer_id == rhs.buffer_id))
      return false;
    if (!(worker_num == rhs.worker_num))
      return false;
    if (!(buffer_size == rhs.buffer_size))
      return false;
    return true;
  }
  bool operator != (const WorkerMeta &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerMeta & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerMeta& obj);
};

void swap(WorkerMeta &a, WorkerMeta &b);

typedef struct _MasterClientMetaState__isset {
  _MasterClientMetaState__isset() : worker_id(false), buffer_id(false), current_client_pid(false), last_client_pid(false), client_start_timestamp(false) {}
  bool worker_id :1;
  bool buffer_id :1;
  bool current_client_pid :1;
  bool last_client_pid :1;
  bool client_start_timestamp :1;
} _MasterClientMetaState__isset;

class MasterClientMetaState {
 public:

  static const char* ascii_fingerprint; // = "3E1937BB452687C816EBF1074545275A";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x19,0x37,0xBB,0x45,0x26,0x87,0xC8,0x16,0xEB,0xF1,0x07,0x45,0x45,0x27,0x5A};

  MasterClientMetaState(const MasterClientMetaState&);
  MasterClientMetaState& operator=(const MasterClientMetaState&);
  MasterClientMetaState() : worker_id(0), buffer_id(0), current_client_pid(0), last_client_pid(0), client_start_timestamp(0) {
  }

  virtual ~MasterClientMetaState() throw();
  int32_t worker_id;
  int32_t buffer_id;
  int32_t current_client_pid;
  int32_t last_client_pid;
  int64_t client_start_timestamp;

  _MasterClientMetaState__isset __isset;

  void __set_worker_id(const int32_t val);

  void __set_buffer_id(const int32_t val);

  void __set_current_client_pid(const int32_t val);

  void __set_last_client_pid(const int32_t val);

  void __set_client_start_timestamp(const int64_t val);

  bool operator == (const MasterClientMetaState & rhs) const
  {
    if (!(worker_id == rhs.worker_id))
      return false;
    if (!(buffer_id == rhs.buffer_id))
      return false;
    if (!(current_client_pid == rhs.current_client_pid))
      return false;
    if (!(last_client_pid == rhs.last_client_pid))
      return false;
    if (!(client_start_timestamp == rhs.client_start_timestamp))
      return false;
    return true;
  }
  bool operator != (const MasterClientMetaState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientMetaState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MasterClientMetaState& obj);
};

void swap(MasterClientMetaState &a, MasterClientMetaState &b);



#endif
